---
import { VisualEditing } from "@sanity/astro/visual-editing";
import Header from '../components/Header.astro';
import HreflangTags from '../components/HreflangTags.astro';
import { detectLanguage, type Language } from '../lib/utils/language.js';

// Import CSS files in order
import '../styles/reset.css';
import '../styles/tokens.css';
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  slugNo?: string;
  slugEn?: string;
}

const {
  title,
  description = "Moderne web-applikasjon med Sanity CMS og Astro frontend",
  slugNo,
  slugEn
} = Astro.props;

// Detect current language from URL
const currentLang: Language = detectLanguage(Astro.request);
const currentPath = new URL(Astro.request.url).pathname;

// Check if Visual Editing should be enabled
const visualEditingEnabled = import.meta.env.PUBLIC_SANITY_VISUAL_EDITING_ENABLED === 'true';
const hasPreviewMode = Astro.cookies.get('sanity-preview-mode')?.value === 'true';
const enableVisualEditing = visualEditingEnabled && hasPreviewMode;
---

<!DOCTYPE html>
<html lang={currentLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <!-- Hreflang tags for SEO -->
    <HreflangTags
      currentLang={currentLang}
      currentPath={currentPath}
      slugNo={slugNo}
      slugEn={slugEn}
    />

    <!-- Preload critical resources for faster transitions -->
    <link rel="preload" href="/htmx.min.js" as="script" />

    <!-- Optimize resource hints -->
    <link rel="dns-prefetch" href="//cdn.sanity.io" />
    <link rel="preconnect" href="//cdn.sanity.io" crossorigin />

    <!-- Minimal critical styles -->
    <style>
      /* ============================================
         INTRINSIC PAGE LAYOUT
         ============================================

         Modern sticky footer pattern using CSS Grid.
         - Header: Natural height
         - Main: Fills available space
         - Footer: Natural height

         No media queries needed - fully intrinsic.
      */

      body {
        display: grid;
        grid-template-rows: auto 1fr auto;
        grid-template-columns: 100%;
        min-block-size: 100vh; /* Logical property for height */
      }

      /* Main content - Flexible, fills available space */
      .main-content {
        display: flex;
        flex-direction: column;
        /* Intrinsic padding using fluid values */
        padding-block-start: clamp(var(--space-4), 4vw, var(--space-8));
        padding-block-end: clamp(var(--space-6), 6vw, var(--space-10));
      }

      /* Footer - Intrinsic size with centered content */
      .page-footer {
        margin-inline: auto;
        /* Fluid sizing instead of fixed */
        width: clamp(var(--space-10), 12vw, var(--space-12));
        aspect-ratio: 1 / 1;
        background-color: var(--color-green-100);
      }

      .page-footer .container {
        display: flex;
        align-items: center;
        justify-content: center;
        block-size: 100%; /* Logical property for height */
      }

      /* ============================================
         PRINT STYLES
         ============================================

         Optimize for printed pages:
         - Remove navigation and non-essential elements
         - Adjust spacing for print media
         - Ensure content is readable
      */

      @media print {
        /* Hide non-essential elements */
        header,
        .page-footer,
        nav,
        [role="navigation"],
        .no-print {
          display: none !important;
        }

        /* Reset page structure for print */
        body {
          display: block;
          min-block-size: auto;
        }

        .main-content {
          padding: 0;
        }

        /* Ensure good contrast for printing */
        * {
          color: #000 !important;
          background: #fff !important;
        }

        /* Prevent page breaks inside important elements */
        article,
        section,
        .event-card,
        .card {
          page-break-inside: avoid;
          break-inside: avoid;
        }

        /* Add page breaks before major sections */
        h1, h2 {
          page-break-after: avoid;
          break-after: avoid;
        }

        /* Adjust typography for print */
        body {
          font-size: 12pt;
          line-height: 1.5;
        }

        /* Show link URLs in print */
        a[href]::after {
          content: " (" attr(href) ")";
          font-size: 0.8em;
        }

        /* Don't show URLs for internal links */
        a[href^="#"]::after,
        a[href^="/"]::after {
          content: "";
        }
      }

      /* ============================================
         USER PREFERENCE QUERIES
         ============================================

         Respect user accessibility preferences:
         - Reduced motion
         - High contrast
         - Dark mode (future)
      */

      /* Reduced motion - disable animations/transitions */
      @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }

      /* High contrast mode - enhance visibility */
      @media (prefers-contrast: high) {
        body {
          font-weight: var(--font-weight-medium);
        }

        a,
        button {
          font-weight: var(--font-weight-bold);
        }

        /* Stronger borders and outlines */
        *:focus-visible {
          outline-width: 3px !important;
          outline-offset: 3px !important;
        }
      }

      /* Dark mode support (future implementation) */
      @media (prefers-color-scheme: dark) {
        /* Dark mode tokens would go here */
        /* Currently not implemented to keep it simple */
      }
    </style>

  </head>
  <body>
    <!-- Header with navigation and language switcher -->
    <Header
      currentLang={currentLang}
      currentPath={currentPath}
      slugNo={slugNo}
      slugEn={slugEn}
    />

    <div class="main-content">
      <slot />
    </div>

    <!-- Footer -->
    <footer class="page-footer">
      <div class="container">
        <!-- Footer content can be added here or via slot -->
      </div>
    </footer>

    <!-- Visual Editing Component -->
    {enableVisualEditing && <VisualEditing enabled={true} zIndex={1000} />}

    <!-- HTMX library -->
    <script src="https://unpkg.com/htmx.org@2.0.3" integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq" crossorigin="anonymous"></script>

    <!-- HTMX initialization -->
    <script is:inline>
      // Initialize HTMX when page loads
      document.addEventListener('DOMContentLoaded', function() {
        if (window.htmx) {
          window.htmx.process(document.body);
        }
      });

      // Simple safety net: Verify CSS loaded after htmx swap
      // If something goes wrong, gracefully degrade to full page reload
      document.body.addEventListener('htmx:afterSwap', function(evt) {
        // Check if critical CSS classes exist (indicates CSS is loaded)
        const testElement = document.querySelector('.event-card, .date-button');
        const hasStyles = testElement && window.getComputedStyle(testElement).display !== '';

        if (!hasStyles) {
          // CSS missing - do full page reload to recover
          window.location.reload();
        }
      });
    </script>
  </body>
</html>

