---
export interface Props {
  targetEvent: any;
  title?: string;
  style?: 'large' | 'compact' | 'minimal';
  completedMessage?: string;
  hideWhenComplete?: boolean;
}

const { 
  targetEvent, 
  title, 
  style = 'compact', 
  completedMessage = 'Arrangementet har startet!',
  hideWhenComplete = false 
} = Astro.props;

// Calculate time remaining server-side for initial render
function getTimeRemaining(targetDate: Date) {
  const now = new Date();
  const diff = targetDate.getTime() - now.getTime();
  
  if (diff <= 0) {
    return { expired: true };
  }
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  return { days, hours, minutes, expired: false };
}

// Get target date from event
const eventDate = targetEvent?.eventDate?.date;
const eventTime = targetEvent?.eventTime?.startTime || '00:00';

// Debug logging
console.log('Countdown Debug:', {
  targetEvent,
  eventDate,
  eventTime,
});

// Default time remaining
let timeRemaining = { expired: true, days: 0, hours: 0, minutes: 0 };
let targetDate = null;
let updateInterval = '60s';

// Check if we have valid date
if (eventDate) {
  // Clean eventTime of any Unicode characters and whitespace
  const cleanTime = eventTime.replace(/[^\d:]/g, '').trim();
  console.log('Cleaning time:', { original: eventTime, cleaned: cleanTime, charCodes: [...eventTime].map(c => c.charCodeAt(0)) });
  
  // Parse cleaned time
  const timeParts = cleanTime.split(':');
  const hours = parseInt(timeParts[0] || '0', 10);
  const minutes = parseInt(timeParts[1] || '0', 10);
  
  targetDate = new Date(eventDate);
  targetDate.setHours(hours, minutes, 0, 0);
  
  console.log('Target date:', targetDate.toISOString());
  
  timeRemaining = getTimeRemaining(targetDate);
  
  // Determine update frequency based on time remaining
  updateInterval = timeRemaining.days && timeRemaining.days > 1 
    ? '3600s' // Update every hour when > 1 day
    : '60s';   // Update every minute when < 1 day
} else {
  console.error('No event date found for countdown. TargetEvent:', targetEvent);
}

// Don't render if expired and hideWhenComplete is true
if (timeRemaining.expired && hideWhenComplete) {
  return null;
}

const eventId = targetEvent?._id;
---

<section class={`countdown countdown--${style}`} aria-labelledby={title ? "countdown-title" : undefined}>
  {title && <h3 id="countdown-title" class="countdown__title">{title}</h3>}

  <div
    class="countdown__display"
    role={timeRemaining.expired ? "status" : "timer"}
    aria-live="polite"
    aria-atomic="true"
    aria-label={timeRemaining.expired ? completedMessage : `Nedtelling: ${timeRemaining.days ? `${timeRemaining.days} dager, ` : ''}${timeRemaining.hours ? `${timeRemaining.hours} timer og ` : ''}${timeRemaining.minutes} minutter igjen`}
    hx-get={`/api/countdown?eventId=${eventId}`}
    hx-trigger={`every ${updateInterval}`}
    hx-swap="innerHTML"
  >
    {timeRemaining.expired ? (
      <p class="countdown__expired">
        <span aria-hidden="true">âœ“</span>
        {completedMessage}
      </p>
    ) : (
      <div class="countdown__time">
        <p class="countdown__sentence">
          {timeRemaining.days > 0 && (
            <span class="countdown__unit">
              <span class="countdown__number">{timeRemaining.days}</span>
              <span class="countdown__label">{timeRemaining.days === 1 ? 'dag' : 'dager'}</span>
            </span>
          )}
          {(timeRemaining.hours >= 0 && (timeRemaining.days > 0 || timeRemaining.hours > 0)) && (
            <span class="countdown__unit">
              <span class="countdown__number">{timeRemaining.hours}</span>
              <span class="countdown__label">{timeRemaining.hours === 1 ? 'time' : 'timer'}</span>
            </span>
          )}
          <span class="countdown__unit">
            <span class="countdown__number">{timeRemaining.minutes}</span>
            <span class="countdown__label">{timeRemaining.minutes === 1 ? 'minutt' : 'minutter'}</span>
          </span>
        </p>
        <p class="countdown__readable" aria-hidden="true">
          {timeRemaining.days > 0 && `${timeRemaining.days} ${timeRemaining.days === 1 ? 'dag' : 'dager'}, `}
          {(timeRemaining.hours >= 0 && (timeRemaining.days > 0 || timeRemaining.hours > 0)) && `${timeRemaining.hours} ${timeRemaining.hours === 1 ? 'time' : 'timer'} og `}
          {timeRemaining.minutes} {timeRemaining.minutes === 1 ? 'minutt' : 'minutter'} igjen
        </p>
      </div>
    )}
  </div>
</section>

<style>
  .countdown {
    text-align: center;
    padding: 1.5rem;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid #dee2e6;
  }

  .countdown__title {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .countdown__display {
    position: relative;
  }

  .countdown__sentence {
    margin: 0;
    font-size: 1.5rem;
    line-height: 1.4;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .countdown__unit {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 60px;
  }

  .countdown__number {
    font-size: 2rem;
    font-weight: 700;
    display: block;
  }

  .countdown__label {
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 0.25rem;
  }

  .countdown__readable {
    font-size: 1rem;
    margin: 0.5rem 0 0 0;
    font-style: italic;
  }

  /* Style variations */
  .countdown--large .countdown__sentence {
    font-size: 2rem;
  }

  .countdown--large .countdown__number {
    font-size: 3rem;
  }

  .countdown--minimal {
    padding: 1rem;
    background: none;
    border: none;
  }

  .countdown--minimal .countdown__sentence {
    font-size: 1.25rem;
  }

  .countdown--minimal .countdown__number {
    font-size: 1.5rem;
  }

  .countdown__expired {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  /* Responsivt design */
  @media (max-width: 768px) {
    .countdown {
      padding: 1rem;
    }

    .countdown__sentence {
      font-size: 1.25rem;
      gap: 0.25rem;
    }

    .countdown__number {
      font-size: 1.5rem;
    }

    .countdown__unit {
      min-width: 50px;
    }

    .countdown--large .countdown__sentence {
      font-size: 1.5rem;
    }

    .countdown--large .countdown__number {
      font-size: 2rem;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .countdown {
      border: 2px solid #000;
    }

    .countdown__number {
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .countdown {
      background: #f8f9fa;
    }
  }
</style>