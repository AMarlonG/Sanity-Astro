---
export interface Props {
  text: string
  linkType: 'internal' | 'anchor' | 'url' | 'email' | 'phone'
  internalLink?: {
    _type?: string
    slug?: {
      current: string
    } | string
  }
  anchorId?: string
  url?: string
  email?: string
  phone?: string
  openInNewTab?: boolean
  accessibility?: {
    ariaLabel?: string
    ariaDescribedBy?: string
  }
  className?: string
}

const {
  text,
  linkType,
  internalLink,
  anchorId,
  url,
  email,
  phone,
  openInNewTab = false,
  accessibility,
  className = ''
} = Astro.props

const internalSlug = typeof internalLink?.slug === 'string'
  ? internalLink.slug
  : internalLink?.slug?.current

const resolveInternalHref = () => {
  if (!internalLink) {
    return undefined
  }

  const slugValue = internalSlug || ''

  switch (internalLink._type) {
    case 'homepage':
      return '/'
    case 'programPage':
      return '/program'
    case 'artistPage':
      return '/artister'
    case 'article':
      return slugValue ? `/artikler/${slugValue}` : undefined
    case 'event':
      return slugValue ? `/program/${slugValue}` : undefined
    case 'page':
      return slugValue ? `/${slugValue}` : undefined
    default:
      return slugValue ? `/${slugValue}` : undefined
  }
}

// Generer href basert på lenketype
let href = '#'
let target = ''
let rel = ''
let isValidLink = false

switch (linkType) {
  case 'internal':
    {
      const resolved = resolveInternalHref()
      if (resolved) {
        href = resolved
        isValidLink = true
      }
    }
    break
  case 'anchor':
    if (anchorId) {
      href = anchorId.startsWith('#') ? anchorId : `#${anchorId}`
      isValidLink = true
    }
    break
  case 'url':
    if (url) {
      href = url
      isValidLink = true
      // Automatisk åpne eksterne lenker i ny fane
      const isExternal = url.startsWith('http') && !url.includes(Astro.site?.hostname || 'localhost')
      if (openInNewTab || isExternal) {
        target = '_blank'
        rel = 'noopener noreferrer'
      }
    }
    break
  case 'email':
    if (email) {
      href = `mailto:${email}`
      isValidLink = true
    }
    break
  case 'phone':
    if (phone) {
      href = `tel:${phone}`
      isValidLink = true
    }
    break
}

// Fallback for ugyldige lenker
if (!isValidLink) {
  console.warn('Link component: Invalid or missing link data', { linkType, internalLink, anchorId, url, email, phone })
}

// Bygg ARIA-attributter
const ariaAttributes: Record<string, string> = {}
if (accessibility?.ariaLabel) {
  ariaAttributes['aria-label'] = accessibility.ariaLabel
}
if (accessibility?.ariaDescribedBy) {
  ariaAttributes['aria-describedby'] = accessibility.ariaDescribedBy
}
---

<a 
  href={href}
  {target}
  {rel}
  class={`link-component ${className}`}
  data-astro-prefetch={linkType === 'internal' ? true : undefined}
  {...ariaAttributes}
>
  {text}
</a>

<style>
  .link-component {
    color: var(--color-primary-500);
    text-decoration: underline;
    text-underline-offset: 0.2em;
    text-decoration-thickness: 1px;
    transition: all 0.2s ease;
    min-height: 44px;
    display: inline-block;
    padding: 0.25rem 0;
    word-break: break-word;
  }

  @media (hover: hover) {
    .link-component:hover {
      color: var(--color-link-hover);
      text-decoration-thickness: 2px;
    }
  }

  .link-component:focus {
    outline: 2px solid var(--color-primary-500);
    outline-offset: 2px;
    background: var(--color-link-focus-bg);
    border-radius: 2px;
  }

  /* Moderne focus-visible for bedre tastaturnavigasjon */
  .link-component:focus-visible {
    outline: 2px solid var(--color-primary-500);
    outline-offset: 2px;
    background: var(--color-link-focus-bg);
    border-radius: 2px;
  }

  /* Forbedret kontrast for visited lenker */
  .link-component:visited {
    color: var(--color-link-visited);
  }

  @media (hover: hover) {
    .link-component:visited:hover {
      color: var(--color-link-visited-hover);
    }
  }

  /* Eksterne lenker indikator */
  .link-component[target="_blank"]::after {
    content: ' ↗';
    font-size: 0.8em;
    opacity: 0.7;
    margin-left: 0.2em;
  }

  /* Mobiloptimalisering */
  @media (max-width: 768px) {
    .link-component {
      min-height: 48px;
      padding: 0.5rem 0;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .link-component {
      text-decoration-thickness: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .link-component {
      transition: none;
    }
  }
</style> 
