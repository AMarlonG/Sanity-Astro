---
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { 
  createOptimizedImageUrl,
  createResponsiveImageSet,
  createLQIP
} from '../lib/imageUtils';

interface Props {
  image: SanityImageSource;
  alt: string;
  caption?: string;
  credit?: string;
  alignment?: 'left' | 'center' | 'right';
  size?: 'small' | 'medium' | 'large' | 'full';
  aspectRatio?: '4:5' | '1:1' | '16:9' | '9:16' | number;
  className?: string;
  loading?: 'lazy' | 'eager';
  quality?: number;
  formats?: string[];
  sizes?: string;
  placeholder?: 'blur' | 'color' | 'empty';
  priority?: boolean;
  // Visual editing props
  _key?: string;
  _type?: string;
}

const { 
  image, 
  alt, 
  caption, 
  credit, 
  alignment = 'center', 
  size = 'medium',
  aspectRatio = '16:9',
  className = '',
  loading = 'lazy',
  quality = 80,
  formats = ['avif', 'webp', 'jpg'],
  sizes,
  placeholder = 'blur',
  priority = false,
  _key,
  _type
} = Astro.props;

// Convert aspect ratio to numeric value
const getAspectRatioValue = (ratio: string | number): number => {
  if (typeof ratio === 'number') return ratio;
  const [width, height] = ratio.split(':').map(Number);
  return height / width;
};

const aspectValue = getAspectRatioValue(aspectRatio);

// Define responsive breakpoints based on size
const getImageWidths = (size: string): number[] => {
  switch (size) {
    case 'small': return [300, 400, 600];
    case 'medium': return [400, 600, 800, 1200];
    case 'large': return [600, 800, 1200, 1600];
    case 'full': return [800, 1200, 1600, 2000];
    default: return [400, 600, 800, 1200];
  }
};

// Generate automatic sizes attribute if not provided
const getAutoSizes = (size: string): string => {
  switch (size) {
    case 'small': return '(max-width: 768px) 100vw, 300px';
    case 'medium': return '(max-width: 768px) 100vw, 600px';
    case 'large': return '(max-width: 768px) 100vw, 800px';
    case 'full': return '100vw';
    default: return '(max-width: 768px) 100vw, 600px';
  }
};

const imageWidths = getImageWidths(size);
const imageSizes = sizes || getAutoSizes(size);

// Generate responsive image sets (only if image exists)
const responsiveImageSets = image ? createResponsiveImageSet(
  image, 
  imageWidths, 
  formats, 
  aspectValue, 
  quality
) : [];

// Generate LQIP for placeholder (only if image exists and placeholder is enabled)
const lqipUrl = (image && placeholder === 'blur') ? createLQIP(image) : null;

// Generate fallback URL (only if image exists)
const fallbackUrl = image ? createOptimizedImageUrl(image, {
  width: imageWidths[0],
  height: Math.round(imageWidths[0] * aspectValue),
  format: 'jpg',
  quality,
  auto: 'format',
  fit: 'crop'
}) : null;

// Determine loading strategy
const imageLoading = priority ? 'eager' : loading;
const fetchPriority = priority ? 'high' : 'auto';

---

<figure
  class={`image-container image-${alignment} image-${size} ${className}`}
  data-sanity={_key ? `${_type}.${_key}` : _type}
>
  {image ? (
    <picture>
      {responsiveImageSets
        .filter((format) => format.srcset.length > 0)
        .map((format) => (
        <source
          srcset={format.srcset}
          sizes={imageSizes}
          type={`image/${format.format}`}
        />
      ))}
      <img
        src={fallbackUrl || ''}
        alt={alt}
        loading={imageLoading}
        decoding="async"
        fetchpriority={fetchPriority}
        sizes={imageSizes}
        class="image"
        style={lqipUrl ? `background-image: url(${lqipUrl}); background-size: cover;` : undefined}
      />
    </picture>
  ) : (
    <div class="image-placeholder">
      <span>Bilde ikke tilgjengelig</span>
    </div>
  )}

  {(caption || credit) && (
    <figcaption class="image-caption">
      {caption && <span class="caption-text">{caption}</span>}
      {credit && <span class="credit-text">{credit}</span>}
    </figcaption>
  )}
</figure>

<style>
  .image-container {
    margin: 2rem 0;
  }
  
  .image-container.image-left {
    text-align: left;
  }
  
  .image-container.image-center {
    text-align: center;
  }
  
  .image-container.image-right {
    text-align: right;
  }
  
  .image {
    max-width: 100%;
    height: auto;
    object-fit: cover;
  }
  
  .image-small .image {
    max-width: 300px;
  }
  
  .image-medium .image {
    max-width: 600px;
  }
  
  .image-large .image {
    max-width: 800px;
  }
  
  .image-full .image {
    width: 100%;
  }
  
  .image-caption {
    margin-top: 0.5rem;
    font-size: 0.9rem;
  }
  
  .caption-text {
    display: block;
  }
  
  .credit-text {
    display: block;
    font-style: italic;
    margin-top: 0.25rem;
  }
  
  .image-placeholder {
    background: #f5f5f5;
    border: 2px dashed #ddd;
    padding: 2rem;
    text-align: center;
  }
</style> 
