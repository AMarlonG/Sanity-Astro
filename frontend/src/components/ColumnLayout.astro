---
import DynamicComponent from './DynamicComponent.astro';

interface Props {
  layoutType?: 'columns' | 'flexbox' | 'stack';
  desktopColumns?: string;
  tabletColumns?: string;
  mobileColumns?: string;
  flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse';
  flexWrap?: boolean;
  gap?: {
    desktop: string;
    mobile: string;
  };
  alignment?: {
    horizontal: string;
    vertical: string;
  };
  containerWidth?: 'full' | 'container' | 'narrow' | 'wide';
  items?: any[];
  _key?: string;
  _type?: string;
}

const {
  layoutType = 'columns',
  desktopColumns = '2',
  tabletColumns = '2',
  mobileColumns = '1',
  flexDirection = 'row',
  flexWrap = true,
  gap = { desktop: 'medium', mobile: 'medium' },
  alignment = { horizontal: 'start', vertical: 'start' },
  containerWidth = 'full',
  items = [],
} = Astro.props;

// Build CSS classes based on configuration
const containerClasses = [
  'responsive-layout',
  `layout-${layoutType}`,
  `width-${containerWidth}`,
];

// Add responsive grid classes
if (layoutType === 'columns') {
  containerClasses.push(`grid-desktop-${desktopColumns}`);
  containerClasses.push(`grid-tablet-${tabletColumns}`);
  containerClasses.push(`grid-mobile-${mobileColumns}`);
}

// Add flexbox classes
if (layoutType === 'flexbox') {
  containerClasses.push(`flex-${flexDirection}`);
  if (flexWrap) containerClasses.push('flex-wrap');
}

// Add gap classes
containerClasses.push(`gap-desktop-${gap.desktop}`);
containerClasses.push(`gap-mobile-${gap.mobile}`);

// Add alignment classes
containerClasses.push(`justify-${alignment.horizontal}`);
containerClasses.push(`align-${alignment.vertical}`);
---

{items && items.length > 0 && (
  <div class={containerClasses.join(' ')}>
    {items.map((item, index) => (
      <div class="layout-item" data-index={index}>
        <DynamicComponent block={item} />
      </div>
    ))}
  </div>
)}

<style>
  .responsive-layout {
    container-type: inline-size;
  }

  /* Grid Layout */
  .layout-columns {
    display: grid;
    width: 100%;
  }

  /* Desktop grid columns */
  .grid-desktop-1 { grid-template-columns: 1fr; }
  .grid-desktop-2 { grid-template-columns: repeat(2, 1fr); }
  .grid-desktop-3 { grid-template-columns: repeat(3, 1fr); }
  .grid-desktop-4 { grid-template-columns: repeat(4, 1fr); }
  .grid-desktop-5 { grid-template-columns: repeat(5, 1fr); }
  .grid-desktop-6 { grid-template-columns: repeat(6, 1fr); }

  /* Tablet responsive */
  @container (max-width: 768px) {
    .grid-tablet-1 { grid-template-columns: 1fr !important; }
    .grid-tablet-2 { grid-template-columns: repeat(2, 1fr) !important; }
    .grid-tablet-3 { grid-template-columns: repeat(3, 1fr) !important; }
  }

  /* Mobile responsive */
  @container (max-width: 480px) {
    .grid-mobile-1 { grid-template-columns: 1fr !important; }
    .grid-mobile-2 { grid-template-columns: repeat(2, 1fr) !important; }
  }

  /* Flexbox Layout */
  .layout-flexbox {
    display: flex;
  }

  .flex-row { flex-direction: row; }
  .flex-column { flex-direction: column; }
  .flex-row-reverse { flex-direction: row-reverse; }
  .flex-column-reverse { flex-direction: column-reverse; }
  .flex-wrap { flex-wrap: wrap; }

  /* Stack Layout */
  .layout-stack {
    display: flex;
    flex-direction: column;
  }

  /* Gap Settings */
  .gap-desktop-0 { gap: 0; }
  .gap-desktop-small { gap: clamp(0.5rem, 2vw, 1rem); }
  .gap-desktop-medium { gap: clamp(1rem, 3vw, 2rem); }
  .gap-desktop-large { gap: clamp(1.5rem, 4vw, 3rem); }
  .gap-desktop-xl { gap: clamp(2rem, 5vw, 4rem); }

  @container (max-width: 768px) {
    .gap-mobile-0 { gap: 0 !important; }
    .gap-mobile-small { gap: 0.5rem !important; }
    .gap-mobile-medium { gap: 1rem !important; }
    .gap-mobile-large { gap: 1.5rem !important; }
  }

  /* Alignment */
  .justify-start { justify-content: flex-start; }
  .justify-center { justify-content: center; }
  .justify-end { justify-content: flex-end; }
  .justify-space-between { justify-content: space-between; }
  .justify-space-around { justify-content: space-around; }

  .align-start { align-items: flex-start; }
  .align-center { align-items: center; }
  .align-end { align-items: flex-end; }
  .align-stretch { align-items: stretch; }

  /* Container Widths */
  .width-full {
    max-width: 100%;
  }
  .width-container {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    padding-left: clamp(1rem, 3vw, 2rem);
    padding-right: clamp(1rem, 3vw, 2rem);
  }
  .width-narrow {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    padding-left: clamp(1rem, 3vw, 2rem);
    padding-right: clamp(1rem, 3vw, 2rem);
  }
  .width-wide {
    max-width: 1600px;
    margin-left: auto;
    margin-right: auto;
    padding-left: clamp(1rem, 3vw, 2rem);
    padding-right: clamp(1rem, 3vw, 2rem);
  }

  /* Layout Item */
  .layout-item {
    min-width: 0; /* Prevents flex/grid overflow */
    container-type: inline-size;
  }
</style>