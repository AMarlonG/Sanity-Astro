---
import { sanityClient } from "sanity:client";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { detectLanguage } from "../lib/utils/language.js";
import { stegaClean } from '@sanity/client/stega';

interface Props {
  title?: string
  events?: any[]
  showScrollbar?: boolean
  showDate?: boolean
  showTime?: boolean
  showVenue?: boolean
  showArtists?: boolean
  sortBy?: 'date-asc' | 'date-desc' | 'title-asc' | 'manual'
  cardFormat?: '16:9' | '4:5'
}

const {
  title,
  events = [],
  showScrollbar = false,
  showDate = true,
  showTime = true,
  showVenue = true,
  showArtists = true,
  sortBy = 'date-asc',
  cardFormat = '16:9'
} = Astro.props

// Detect current language from URL
const currentLanguage = detectLanguage(Astro.request)
const programPath = currentLanguage === 'en' ? '/en/program' : '/program'

// Opprett Sanity Image URL Builder
const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
  projectId && dataset
    ? imageUrlBuilder({ projectId, dataset }).image(source)
    : null;

// Hent faktiske event-data fra referansene
let eventData = []
if (events && events.length > 0) {
  const eventIds = events.map((item: any) => item._ref).filter(Boolean)
  if (eventIds.length > 0) {
    const EVENT_QUERY = `*[_type == "event" && _id in $eventIds]{
      _id,
      title,
      slug,
      "image": image.image,
      "imageAlt": image.alt,
      eventDate,
      eventTime,
      venue->{title},
      artists[]->{name}
    }`
    eventData = await sanityClient.fetch(EVENT_QUERY, { eventIds })
  }
}

// Hjelpefunksjon for å escape HTML
function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
}

// Generer bilde-URL med Sanity's automatiske hotspot-håndtering
const getImageUrl = (image: any, width: number, height: number) => {
  if (!image || !urlFor) return '';
  return urlFor(image).width(width).height(height).url() || '';
};

// Sorter arrangementer basert på valgt sortering
let sortedEvents = [...eventData]
switch (sortBy) {
  case 'date-asc':
    sortedEvents.sort((a, b) => {
      const dateA = a.eventDate?.date ? new Date(a.eventDate.date) : new Date(0)
      const dateB = b.eventDate?.date ? new Date(b.eventDate.date) : new Date(0)
      return dateA.getTime() - dateB.getTime()
    })
    break
  case 'date-desc':
    sortedEvents.sort((a, b) => {
      const dateA = a.eventDate?.date ? new Date(a.eventDate.date) : new Date(0)
      const dateB = b.eventDate?.date ? new Date(b.eventDate.date) : new Date(0)
      return dateB.getTime() - dateA.getTime()
    })
    break
  case 'title-asc':
    sortedEvents.sort((a, b) => (a.title || '').localeCompare(b.title || ''))
    break
  case 'manual':
  default:
    // Behold manuell rekkefølge
    break
}

// CSS-klasser basert på props
const containerClass = 'event-scroll-container'
const scrollbarClass = showScrollbar ? '' : 'hide-scrollbar'
const cardFormatClass = `card-format-${cardFormat.replace(':', '-')}`
---

<section class={`${containerClass} ${scrollbarClass} ${cardFormatClass}`}>
  {title && <h3 class="event-scroll-title">{title}</h3>}
  <div class="event-scroll-wrapper">
    <ul class="event-list">
      {sortedEvents.map((event) => {
        if (!event) return null

        const eventDate = event.eventDate?.date ? new Date(event.eventDate.date) : null
        const dateString = eventDate ? eventDate.toLocaleDateString('nb-NO') : ''
        const timeString = stegaClean(event.eventTime || '')
        const venueName = stegaClean(event.venue?.title || '')
        const artistNames = stegaClean(event.artists?.map((artist: any) => artist.name).join(', ') || '')
        const eventSlug = stegaClean(event.slug?.current || '')

        const eventImage = event.image || null
        const imageAlt = event.imageAlt || event.title || ''

        // Beregn høyde basert på cardFormat
        const [widthRatio, heightRatio] = cardFormat.split(':').map(Number)
        const cardWidth = cardFormat === '16:9' ? 350 : 300
        const cardHeight = Math.round((cardWidth * heightRatio) / widthRatio)

        // Kombinert dato og tid for <time> element
        const dateTimeValue = eventDate && timeString
          ? `${eventDate.toISOString().split('T')[0]}T${timeString}:00`
          : eventDate?.toISOString().split('T')[0]

        return (
          <li class="event-item">
            <article class="event-card">
              {eventImage && (
                <div class="event-image">
                  <picture>
                    <img
                      src={getImageUrl(eventImage, cardWidth, cardHeight)}
                      alt={imageAlt}
                      loading="lazy"
                      decoding="async"
                    />
                  </picture>
                </div>
              )}
              <div class="event-content">
                <h4 class="event-title">
                  {eventSlug ? (
                    <a href={`${programPath}/${eventSlug}`} class="event-title-link">
                      {stegaClean(event.title || '')}
                    </a>
                  ) : (
                    stegaClean(event.title || '')
                  )}
                </h4>
                {(showDate || showTime) && (dateString || timeString) && (
                  <time class="event-datetime" dateTime={dateTimeValue}>
                    {showDate && dateString && <span class="event-date">{dateString}</span>}
                    {showTime && timeString && <span class="event-time">{timeString}</span>}
                  </time>
                )}
                {showVenue && venueName && <address class="event-venue">{venueName}</address>}
                {showArtists && artistNames && <p class="event-artists">{artistNames}</p>}
                {event.buttonText && (
                  <a
                    href={event.buttonUrl || '#'}
                    class="event-button"
                    target={event.buttonOpenInNewTab ? '_blank' : undefined}
                    rel={event.buttonOpenInNewTab ? 'noopener noreferrer' : undefined}
                  >
                    {event.buttonText}
                  </a>
                )}
              </div>
            </article>
          </li>
        )
      })}
    </ul>
  </div>
</section>

<style>
  /* Intrinsic Scroll Container */
  .event-scroll-container {
    container-type: inline-size;
    width: 100%;
    margin-block: clamp(var(--space-5), 4vw, var(--space-6));
  }

  .event-scroll-title {
    font-size: clamp(var(--font-size-xl), 3vw, var(--font-size-2xl));
    font-weight: var(--font-weight-semibold);
    margin-block-end: var(--space-4);
  }

  /* Fluid scroll wrapper */
  .event-scroll-wrapper {
    overflow-x: auto;
    padding-block: var(--space-2);
    scroll-snap-type: x mandatory;
  }

  .event-list {
    display: flex;
    gap: clamp(var(--space-3), 2.5vw, var(--space-5));
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .event-item {
    flex-shrink: 0;
    scroll-snap-align: start;
  }

  /* Intrinsic event cards */
  .event-card {
    position: relative; /* Required for stretched link pattern */
    container-type: inline-size;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition: transform var(--transition-base), box-shadow var(--transition-base);
  }

  /* Content-based card sizing */
  .card-format-16-9 .event-card {
    width: clamp(280px, 40vw, 380px);
    aspect-ratio: 16/9;
  }

  .card-format-4-5 .event-card {
    width: clamp(240px, 35vw, 320px);
    aspect-ratio: 4/5;
  }

  .event-card:hover {
    transform: translateY(clamp(-1px, -0.5vw, -3px));
    box-shadow: var(--shadow-md);
  }

  .event-image {
    width: 100%;
    height: clamp(120px, 15cqw, 200px);
    overflow: hidden;
    aspect-ratio: 16/9;
  }

  .event-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Intrinsic content padding */
  .event-content {
    padding: clamp(var(--space-3), 4cqw, var(--space-5));
  }

  .event-title {
    font-size: clamp(var(--font-size-base), 3.5cqw, var(--font-size-lg));
    font-weight: var(--font-weight-semibold);
    margin: 0 0 var(--space-2) 0;
    line-height: var(--line-height-tight);
  }

  .event-date {
    font-size: clamp(var(--font-size-sm), 2.8cqw, var(--font-size-base));
    font-weight: var(--font-weight-medium);
    margin-block-end: var(--space-1);
  }

  .event-datetime,
  .event-time,
  .event-venue {
    position: relative;
    z-index: 0; /* Below stretched link */
    font-size: clamp(var(--font-size-sm), 2.8cqw, var(--font-size-base));
    margin-block-end: var(--space-1);
  }

  .event-artists {
    position: relative;
    z-index: 0; /* Below stretched link */
    font-size: clamp(var(--font-size-sm), 2.8cqw, var(--font-size-base));
    margin-block-end: var(--space-4);
    font-style: italic;
  }

  /* Secondary CTA button - elevated above stretched link */
  .event-button {
    position: relative; /* Creates stacking context */
    z-index: 2; /* Above the stretched link (z-index: 1) */
    display: inline-flex;
    align-items: center;
    padding: clamp(var(--space-2), 2cqw, var(--space-3))
             clamp(var(--space-3), 3cqw, var(--space-4));
    background: var(--color-blue);
    color: white;
    text-decoration: none;
    font-size: clamp(var(--font-size-sm), 2.5cqw, var(--font-size-base));
    font-weight: var(--font-weight-medium);
    transition: background-color var(--transition-base);
    margin-inline-end: var(--space-2);
  }

  .event-button::after {
    content: none;
  }

  @media (hover: hover) {
    .event-button:hover {
      background: var(--color-blue-600);
    }
  }

  .event-button:focus-visible {
    outline: 2px solid var(--color-blue);
    outline-offset: 2px;
  }

  /* Stretched link pattern - makes entire card clickable */
  .event-title-link {
    color: inherit;
    text-decoration: none;
    transition: color var(--transition-base);
  }

  /* Pseudo-element stretches to cover entire card */
  .event-title-link::before {
    content: '';
    position: absolute;
    inset: 0; /* Modern shorthand for top:0; right:0; bottom:0; left:0; */
    z-index: 1;
  }

  /* No arrow indicator on card title links */
  .event-title-link::after {
    content: none;
  }

  /* Hover state - underline appears on title text */
  @media (hover: hover) {
    .event-title-link:hover {
      text-decoration: underline;
      text-decoration-thickness: 2px;
    }
  }

  /* Focus state - highly visible for keyboard users */
  .event-title-link:focus-visible {
    outline: 2px solid var(--color-blue);
    outline-offset: 2px;
    text-decoration: underline;
  }

  /* Container Query Enhancements */
  @container (min-width: 300px) {
    .event-content {
      padding: var(--space-4);
    }
    
    .event-title {
      font-size: var(--font-size-lg);
    }
  }

  @container (min-width: 400px) {
    .event-content {
      padding: var(--space-5);
    }
    
    .event-image {
      height: 180px;
    }
  }

  /* Scroll snap and accessibility */
  .hide-scrollbar .event-scroll-wrapper {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .hide-scrollbar .event-scroll-wrapper::-webkit-scrollbar {
    display: none;
  }

  /* Support for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .event-card,
    .event-title-link,
    .event-button {
      transition: none;
    }

    .event-card:hover {
      transform: none; /* Disable lift effect */
    }

    .event-scroll-wrapper {
      scroll-behavior: auto;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .event-card {
      border-width: 2px;
    }

    .event-title-link:focus-visible {
      outline-width: 3px;
    }

    .event-button:focus-visible {
      outline-width: 3px;
    }
  }
</style> 