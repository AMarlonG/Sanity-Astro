---
import Layout from '../layouts/Layout.astro';
import { loadPage } from '../lib/sanityQueries';
import PortableText from '../components/PortableText.astro';

export async function getStaticPaths() {
  // In development, return empty array for on-demand rendering
  if (import.meta.env.DEV) {
    return [];
  }
  
  // In production, you might want to pre-generate paths
  // This would require fetching all published pages
  return [];
}

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

let page = null;
let title = '';
let content = [];

try {
  const result = await loadPage(slug, Astro.request);
  page = result.data;
  
  if (!page) {
    return Astro.redirect('/404');
  }

  title = page.title;
  content = page.content;

  // Additional check for scheduled content in SSR
  if (page.publishingStatus === 'scheduled' && page.scheduledPeriod) {
    const now = new Date();
    const start = new Date(page.scheduledPeriod.startDate);
    const end = new Date(page.scheduledPeriod.endDate);
    
    if (now < start || now > end) {
      return Astro.redirect('/404');
    }
  }

  // Draft content should not be visible (unless in preview mode)
  if (page.publishingStatus === 'draft') {
    const cookieHeader = Astro.request.headers.get('cookie');
    const hasPreviewMode = cookieHeader?.includes('sanity-preview-mode=true');
    
    if (!hasPreviewMode) {
      return Astro.redirect('/404');
    }
  }
} catch (error) {
  console.error('Error loading page:', error);
  return Astro.redirect('/404');
}
---

<Layout title={title}>
  <main>
    <h1>{title}</h1>
    
    {content && content.length > 0 && (
      <div class="page-content">
        {content.map((component) => {
          // Use the same component rendering logic as your pageBuilder
          // This will depend on your specific component structure
          switch (component._type) {
            case 'portableText':
              return <PortableText content={component.content} />;
            default:
              return <div>Unsupported component: {component._type}</div>;
          }
        })}
      </div>
    )}
  </main>
</Layout>

<style>
  .page-content {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    line-height: 1.6;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #333;
  }
  
  @media (max-width: 768px) {
    .page-content {
      padding: 1rem;
    }
    
    h1 {
      font-size: 2rem;
    }
  }
</style>