---
import ContentPageLayout from '../../layouts/ContentPageLayout.astro';
import DateFilter from '../../components/DateFilter.astro';
import { createDataService } from '../../lib/sanity/dataService.js';
import { formatDateWithWeekday } from '../../lib/utils/dates';
import { getOptimizedImageUrl, getResponsiveSrcSet, IMAGE_QUALITY, RESPONSIVE_WIDTHS } from '../../lib/imageHelpers';

// Create data service with Visual Editing support
const dataService = createDataService(Astro.request);

// Fetch program page content for metadata
const programPage = await dataService.getProgramPage();

// Get events from programPage.selectedEvents
const events = programPage?.selectedEvents || [];

// Fallback values
const pageTitle = programPage?.title || 'Program';

// Extract unique dates for filter
const availableDates = events
  .filter(event => event.eventDate?.date)
  .map(event => ({
    date: event.eventDate.date,
    title: event.eventDate.title
  }));

// Group events by date
const eventsByDate = events.reduce((acc, event) => {
  if (!event.eventDate?.date) return acc;

  const dateKey = event.eventDate.date;
  if (!acc[dateKey]) {
    acc[dateKey] = {
      date: event.eventDate.date,
      displayTitle: event.eventDate.title || formatDateWithWeekday(event.eventDate.date, 'en'),
      events: []
    };
  }
  acc[dateKey].events.push(event);
  return acc;
}, {} as Record<string, { date: string; displayTitle: string; events: typeof events }>);

// Sort dates chronologically
const sortedDates = Object.values(eventsByDate).sort((a, b) =>
  new Date(a.date).getTime() - new Date(b.date).getTime()
);

// Get date filter from URL
const dateFilter = Astro.url.searchParams.get('date') || undefined;

// Filter dates if date parameter is present
const filteredDates = dateFilter
  ? sortedDates.filter(d => d.date === dateFilter)
  : sortedDates;

// Check if this is an htmx request
const isHtmxRequest = Astro.request.headers.get('HX-Request') === 'true';
---

{isHtmxRequest ? (
  /* Return only the filtered event results for htmx */
  <Fragment>
    {filteredDates.length > 0 ? (
      filteredDates.map(({ date, displayTitle, events: dateEvents }) => (
        <section class="content-section date-section" data-date={date}>
          <h3 class="date-title">{displayTitle}</h3>
          <div class="grid events-grid">
            {dateEvents.map((event) => (
              <article class="event-card card" data-event-date={event.eventDate?.date}>
                <div class="event-header">
                  <h4 class="event-title">{event.title}</h4>
                  {event.excerpt_en && (
                    <p class="event-excerpt">{event.excerpt_en}</p>
                  )}
                  <div class="event-meta">
                    {event.venue && (
                      <div class="event-detail">
                        <span class="event-label">Venue:</span>
                        <span>{event.venue.title}</span>
                      </div>
                    )}
                    {event.eventTime && (
                      <div class="event-detail">
                        <span class="event-label">Time:</span>
                        <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                      </div>
                    )}
                  </div>
                </div>

                {event.image?.image && (
                  <div class="event-image">
                    <picture>
                      <source
                        srcset={getResponsiveSrcSet(event.image.image, RESPONSIVE_WIDTHS.MEDIUM, IMAGE_QUALITY.CARD)}
                        type="image/webp"
                        sizes="(max-width: 768px) 100vw, 400px"
                      />
                      <img
                        src={getOptimizedImageUrl(event.image.image, 400, 300, IMAGE_QUALITY.CARD)}
                        alt={event.image.alt || event.title}
                        loading="lazy"
                        decoding="async"
                        class="event-card-image"
                      />
                    </picture>
                  </div>
                )}

                <div class="event-actions">
                  <a href={`/en/program/${event.slug}`} class="btn btn-link">Read more</a>
                  {event.ticketUrl && (
                    <a href={event.ticketUrl} class="btn btn-primary" target="_blank" rel="noopener noreferrer">Buy tickets</a>
                  )}
                </div>
            </article>
          ))}
          </div>
        </section>
      ))
    ) : (
      <section class="content-section">
        <div class="no-results">
          <h3 class="no-results-title">No events found</h3>
          <p class="no-results-text">No events for this date</p>
        </div>
      </section>
    )}
  </Fragment>
) : (
  /* Return full page for regular requests */
  <ContentPageLayout
    title={pageTitle}
    excerpt={programPage?.excerpt}
    pageDocument={programPage}
  >
    <DateFilter
      availableDates={availableDates}
      language="en"
      endpoint="/en/program"
    />

    <div id="event-results">
      {filteredDates.length > 0 ? (
        filteredDates.map(({ date, displayTitle, events: dateEvents }) => (
        <section class="content-section date-section" data-date={date}>
          <h3 class="date-title">{displayTitle}</h3>
          <div class="grid events-grid">
            {dateEvents.map((event) => (
              <article class="event-card card" data-event-date={event.eventDate?.date}>
                <div class="event-header">
                  <h4 class="event-title">{event.title}</h4>
                  {event.excerpt_en && (
                    <p class="event-excerpt">{event.excerpt_en}</p>
                  )}
                  <div class="event-meta">
                    {event.venue && (
                      <div class="event-detail">
                        <span class="event-label">Venue:</span>
                        <span>{event.venue.title}</span>
                      </div>
                    )}
                    {event.eventTime && (
                      <div class="event-detail">
                        <span class="event-label">Time:</span>
                        <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                      </div>
                    )}
                  </div>
                </div>

                {event.image?.image && (
                  <div class="event-image">
                    <picture>
                      <source
                        srcset={getResponsiveSrcSet(event.image.image, RESPONSIVE_WIDTHS.MEDIUM, IMAGE_QUALITY.CARD)}
                        type="image/webp"
                        sizes="(max-width: 768px) 100vw, 400px"
                      />
                      <img
                        src={getOptimizedImageUrl(event.image.image, 400, 300, IMAGE_QUALITY.CARD)}
                        alt={event.image.alt || event.title}
                        loading="lazy"
                        decoding="async"
                        class="event-card-image"
                      />
                    </picture>
                  </div>
                )}

                <div class="event-actions">
                  <a href={`/en/program/${event.slug}`} class="btn btn-link">Read more</a>
                  {event.ticketUrl && (
                    <a href={event.ticketUrl} class="btn btn-primary" target="_blank" rel="noopener noreferrer">Buy tickets</a>
                  )}
                </div>
            </article>
          ))}
          </div>
        </section>
      ))
    ) : (
      <section class="content-section">
        <div class="no-results">
          <h3 class="no-results-title">No events found</h3>
          <p class="no-results-text">No events have been added yet</p>
        </div>
      </section>
      )}
    </div>
  </ContentPageLayout>
)}

<style>
  /* Section Layout */
  .content-section {
    margin-block-end: clamp(var(--space-6), 6vw, var(--space-9));
  }

  .date-section {
    margin-block-end: var(--space-8);
  }

  .date-title {
    margin: 0 0 var(--space-4) 0;
    color: var(--color-text-primary);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
  }

  /* Intrinsic Grid System */
  .grid {
    container-type: inline-size;
    display: grid;
    gap: clamp(var(--space-4), 3vw, var(--space-6));
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 350px), 1fr));
  }

  /* No Results State */
  .no-results {
    text-align: center;
    padding: var(--space-8) var(--space-4);
    color: var(--color-text-secondary);
  }

  .no-results-title {
    margin: 0 0 var(--space-2) 0;
    color: var(--color-text-primary);
    font-size: var(--font-size-xl);
  }

  .no-results-text {
    margin: 0;
    font-size: var(--font-size-base);
  }

  /* Event Card */
  .event-card {
    container-type: inline-size;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  /* Event Header (above image) */
  .event-header {
    padding: var(--space-4);
    padding-block-end: var(--space-3);
  }

  .event-title {
    margin: 0 0 var(--space-2) 0;
    color: var(--color-text-primary);
    font-size: clamp(var(--font-size-lg), 4cqw, var(--font-size-xl));
    line-height: var(--line-height-tight);
  }

  .event-excerpt {
    margin: 0 0 var(--space-3) 0;
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
    line-height: var(--line-height-normal);
  }

  .event-meta {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
  }

  .event-detail {
    display: flex;
    gap: var(--space-2);
  }

  .event-label {
    font-weight: var(--font-weight-medium);
    flex-shrink: 0;
  }

  /* Event Image */
  .event-image {
    position: relative;
    width: 100%;
    aspect-ratio: 4/5;
    overflow: hidden;
  }

  .event-image picture {
    display: block;
    width: 100%;
    height: 100%;
  }

  .event-card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Event Actions (below image) */
  .event-actions {
    padding: var(--space-4);
    display: flex;
    gap: var(--space-3);
    flex-wrap: wrap;
  }

  .btn {
    display: inline-block;
    padding: var(--space-2) var(--space-4);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    text-decoration: none;
    text-align: center;
    transition: all var(--transition-base);
    border: 1px solid;
  }

  .btn-link {
    color: var(--color-primary-500);
    border-color: var(--color-primary-500);
    background: transparent;
  }

  .btn-link:hover {
    background: var(--color-primary-50);
  }

  .btn-primary {
    color: white;
    background: var(--color-primary-500);
    border-color: var(--color-primary-500);
  }

  .btn-primary:hover {
    background: var(--color-primary-600);
    border-color: var(--color-primary-600);
  }

  /* Container Query Enhancements */
  @container (min-width: 350px) {
    .event-title {
      font-size: var(--font-size-xl);
    }

    .event-excerpt {
      font-size: var(--font-size-base);
    }

    .event-meta {
      font-size: var(--font-size-base);
    }
  }
</style>

<script>
  // Update active button state after htmx swap
  document.body.addEventListener('htmx:afterSwap', (event) => {
    // Get the clicked button from the event
    const trigger = event.detail.target;
    if (!trigger) return;

    // Find all filter buttons
    const buttons = document.querySelectorAll('.date-button');

    // Remove active class from all buttons
    buttons.forEach(btn => btn.classList.remove('active'));

    // Find which button was clicked by checking the URL
    const url = new URL(window.location.href);
    const dateParam = url.searchParams.get('date');

    // Add active class to the correct button
    buttons.forEach(btn => {
      const btnUrl = new URL(btn.getAttribute('hx-get'), window.location.origin);
      const btnDate = btnUrl.searchParams.get('date');

      if ((!dateParam && !btnDate) || (dateParam && btnDate === dateParam)) {
        btn.classList.add('active');
      }
    });
  });
</script>
