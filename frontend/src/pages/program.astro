---
import ContentPageLayout from '../layouts/ContentPageLayout.astro';
import CardGrid from '../components/CardGrid.astro';
import Image from '../components/Image.astro';
import { createDataService } from '../lib/sanity/dataService.js';
import { formatDateForLanguage } from '../../../shared/utils/dates';

// Create data service with Visual Editing support
const dataService = createDataService(Astro.request);

// Hent program-siden innhold fra programPage schema
const programPage = await dataService.getProgramPage();

// Hent alle publiserte arrangementer
const events = await dataService.getPublishedEvents();

// Fallback values
const pageTitle = programPage?.title || 'Program';
---

<ContentPageLayout
  title={pageTitle}
  pageContent={programPage?.content}
>
  <CardGrid
    title="Alle arrangementer"
    items={events}
    gridType="events"
    noResultsTitle="Ingen arrangementer publisert"
  >
    {events.map((event) => (
      <article class="event-card card" data-event-date={event.eventDate?.date}>
        <a href={`/program/${event.slug.current}`} class="event-link">
          {event.image && (
            <div class="event-image">
              <Image
                image={event.image.image}
                alt={event.image.alt || event.title}
                caption=""
                credit=""
                size="full"
                aspectRatio="16:9"
                alignment="center"
                className="event-card-image"
              />
            </div>
          )}
          <div class="event-content">
            <h3 class="event-title">{event.title}</h3>

            <div class="event-meta">
              {event.eventDate && (
                <div class="event-detail">
                  <span class="event-label">Dato:</span>
                  <span>{event.eventDate.title} ({formatDateForLanguage(event.eventDate.date, 'no')})</span>
                </div>
              )}

              {event.eventTime && (
                <div class="event-detail">
                  <span class="event-label">Tid:</span>
                  <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                </div>
              )}

              {event.venue && (
                <div class="event-detail">
                  <span class="event-label">Sted:</span>
                  <span>{event.venue.title}</span>
                </div>
              )}

              {event.artists && event.artists.length > 0 && (
                <div class="event-detail">
                  <span class="event-label">Artister:</span>
                  <span>{event.artists.map((artist: any) => artist.name).join(', ')}</span>
                </div>
              )}

              {event.genre && (
                <div class="event-genre">
                  <span class="event-label">Sjanger:</span>
                  <span class="genre-name">{event.genre.title}</span>
                </div>
              )}
            </div>
          </div>
        </a>
      </article>
    ))}
  </CardGrid>

  <style>
    /* Event Card Specific Styles */
    .event-card {
      container-type: inline-size;
      overflow: hidden;
      transition: box-shadow var(--transition-base);
    }

    .event-link {
      text-decoration: none;
      color: inherit;
      display: block;
    }

    .event-image {
      position: relative;
      height: clamp(180px, 20cqw, 240px);
      overflow: hidden;
      aspect-ratio: 16/9;
    }

    .event-card-image .image-container {
      margin: 0;
      height: 100%;
    }

    .event-card-image .image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 0;
    }

    .event-card-image .image-caption {
      display: none;
    }

    .event-content {
      padding: 0;
    }

    .event-title {
      margin: 0 0 var(--space-3) 0;
      color: var(--color-text-primary);
      font-size: clamp(var(--font-size-lg), 4cqw, var(--font-size-xl));
      line-height: var(--line-height-tight);
    }

    .event-meta {
      color: var(--color-text-secondary);
      font-size: clamp(var(--font-size-sm), 3cqw, var(--font-size-base));
      line-height: var(--line-height-normal);
    }

    .event-detail {
      margin-block-end: var(--space-2);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .event-label {
      font-weight: var(--font-weight-medium);
      flex-shrink: 0;
      min-width: 4rem;
    }

    .event-genre {
      margin-block-start: var(--space-3);
      padding-block-start: var(--space-3);
      border-block-start: 1px solid var(--color-border-light);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .genre-name {
      color: var(--color-text-disabled);
      font-size: var(--font-size-sm);
    }

    /* Container Query Enhancements */
    @container (min-width: 350px) {
      .event-title {
        font-size: var(--font-size-xl);
      }

      .event-meta {
        font-size: var(--font-size-base);
      }
    }

    @container (min-width: 400px) {
      .event-image {
        height: 200px;
      }
    }
  </style>

</ContentPageLayout>