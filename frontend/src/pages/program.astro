---
import ContentPageLayout from '../layouts/ContentPageLayout.astro';
import CardGrid from '../components/CardGrid.astro';
import DateFilter from '../components/DateFilter.astro';
import { createDataService } from '../lib/sanity/dataService.js';
import { formatDateWithWeekday } from '../lib/utils/dates';
import { getOptimizedImageUrl, getResponsiveSrcSet, IMAGE_QUALITY, RESPONSIVE_WIDTHS } from '../lib/imageHelpers';

// Create data service with Visual Editing support
const dataService = createDataService(Astro.request);

// Hent program-siden innhold for metadata
const programPage = await dataService.getProgramPage();

// Get events from programPage.selectedEvents
const events = programPage?.selectedEvents || [];

// Fallback values
const pageTitle = programPage?.title || 'Program';

// Extract unique dates for filter
const availableDates = events
  .filter(event => event.eventDate?.date)
  .map(event => ({
    date: event.eventDate.date,
    title: event.eventDate.title
  }));

// Group events by date
const eventsByDate = events.reduce((acc, event) => {
  if (!event.eventDate?.date) return acc;

  const dateKey = event.eventDate.date;
  if (!acc[dateKey]) {
    acc[dateKey] = {
      date: event.eventDate.date,
      displayTitle: event.eventDate.title || formatDateWithWeekday(event.eventDate.date, 'no'),
      events: []
    };
  }
  acc[dateKey].events.push(event);
  return acc;
}, {} as Record<string, { date: string; displayTitle: string; events: typeof events }>);

// Sort dates chronologically
const sortedDates = Object.values(eventsByDate).sort((a, b) =>
  new Date(a.date).getTime() - new Date(b.date).getTime()
);

// Get date filter from URL
const dateFilter = Astro.url.searchParams.get('date') || undefined;

// Filter dates if date parameter is present
const filteredDates = dateFilter
  ? sortedDates.filter(d => d.date === dateFilter)
  : sortedDates;

// Check if this is an htmx request
const isHtmxRequest = Astro.request.headers.get('HX-Request') === 'true';
---

{isHtmxRequest ? (
  /* Return only the filtered event results for htmx */
  <Fragment>
    {filteredDates.length > 0 ? (
      filteredDates.map(({ date, displayTitle, events: dateEvents }) => (
        <section class="content-section date-section" data-date={date}>
          <h3 class="date-title">{displayTitle}</h3>
          <div class="grid events-grid">
            {dateEvents.map((event) => (
              <article class="event-card card" data-event-date={event.eventDate?.date}>
              <a href={`/program/${event.slug}`} class="event-link">
                {event.image?.image && (
                  <div class="event-image">
                    <picture>
                      <source
                        srcset={getResponsiveSrcSet(event.image.image, RESPONSIVE_WIDTHS.MEDIUM, IMAGE_QUALITY.CARD)}
                        type="image/webp"
                        sizes="(max-width: 768px) 100vw, 400px"
                      />
                      <img
                        src={getOptimizedImageUrl(event.image.image, 400, 300, IMAGE_QUALITY.CARD)}
                        alt={event.image.alt || event.title}
                        loading="lazy"
                        decoding="async"
                        class="event-card-image"
                      />
                    </picture>
                  </div>
                )}
                <div class="event-content">
                  <h4 class="event-title">{event.title}</h4>

                  <div class="event-meta">
                    {event.eventTime && (
                      <div class="event-detail">
                        <span class="event-label">Tid:</span>
                        <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                      </div>
                    )}

                    {event.venue && (
                      <div class="event-detail">
                        <span class="event-label">Sted:</span>
                        <span>{event.venue.title}</span>
                      </div>
                    )}

                    {event.artists && event.artists.length > 0 && (
                      <div class="event-detail">
                        <span class="event-label">Artister:</span>
                        <span>{event.artists.map((artist: any) => artist.name).join(', ')}</span>
                      </div>
                    )}

                    {event.genre && (
                      <div class="event-genre">
                        <span class="event-label">Sjanger:</span>
                        <span class="genre-name">{event.genre.title}</span>
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </article>
          ))}
          </div>
        </section>
      ))
    ) : (
      <section class="content-section">
        <div class="no-results">
          <h3 class="no-results-title">Ingen arrangementer funnet</h3>
          <p class="no-results-text">Ingen arrangementer for denne datoen</p>
        </div>
      </section>
    )}
  </Fragment>
) : (
  /* Return full page for regular requests */
  <ContentPageLayout
    title={pageTitle}
    pageDocument={programPage}
  >
    <DateFilter
      availableDates={availableDates}
      language="no"
    />

    <div id="event-results">
      {filteredDates.length > 0 ? (
        filteredDates.map(({ date, displayTitle, events: dateEvents }) => (
        <section class="content-section date-section" data-date={date}>
          <h3 class="date-title">{displayTitle}</h3>
          <div class="grid events-grid">
            {dateEvents.map((event) => (
              <article class="event-card card" data-event-date={event.eventDate?.date}>
              <a href={`/program/${event.slug}`} class="event-link">
                {event.image?.image && (
                  <div class="event-image">
                    <picture>
                      <source
                        srcset={getResponsiveSrcSet(event.image.image, RESPONSIVE_WIDTHS.MEDIUM, IMAGE_QUALITY.CARD)}
                        type="image/webp"
                        sizes="(max-width: 768px) 100vw, 400px"
                      />
                      <img
                        src={getOptimizedImageUrl(event.image.image, 400, 300, IMAGE_QUALITY.CARD)}
                        alt={event.image.alt || event.title}
                        loading="lazy"
                        decoding="async"
                        class="event-card-image"
                      />
                    </picture>
                  </div>
                )}
                <div class="event-content">
                  <h4 class="event-title">{event.title}</h4>

                  <div class="event-meta">
                    {event.eventTime && (
                      <div class="event-detail">
                        <span class="event-label">Tid:</span>
                        <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                      </div>
                    )}

                    {event.venue && (
                      <div class="event-detail">
                        <span class="event-label">Sted:</span>
                        <span>{event.venue.title}</span>
                      </div>
                    )}

                    {event.artists && event.artists.length > 0 && (
                      <div class="event-detail">
                        <span class="event-label">Artister:</span>
                        <span>{event.artists.map((artist: any) => artist.name).join(', ')}</span>
                      </div>
                    )}

                    {event.genre && (
                      <div class="event-genre">
                        <span class="event-label">Sjanger:</span>
                        <span class="genre-name">{event.genre.title}</span>
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </article>
          ))}
          </div>
        </section>
      ))
    ) : (
      <section class="content-section">
        <div class="no-results">
          <h3 class="no-results-title">Ingen arrangementer funnet</h3>
          <p class="no-results-text">Ingen arrangementer er lagt til enn√•</p>
        </div>
      </section>
      )}
    </div>
  </ContentPageLayout>
)}

<style>
    /* Section Layout */
    .content-section {
      margin-block-end: clamp(var(--space-6), 6vw, var(--space-9));
    }

    .date-section {
      margin-block-end: var(--space-8);
    }

    .date-title {
      margin: 0 0 var(--space-4) 0;
      color: var(--color-text-primary);
      font-size: var(--font-size-xl);
      font-weight: var(--font-weight-semibold);
    }

    /* Intrinsic Grid System */
    .grid {
      container-type: inline-size;
      display: grid;
      gap: clamp(var(--space-4), 3vw, var(--space-6));
      grid-template-columns: repeat(auto-fill, minmax(min(100%, 350px), 1fr));
    }

    /* No Results State */
    .no-results {
      text-align: center;
      padding: var(--space-8) var(--space-4);
      color: var(--color-text-secondary);
    }

    .no-results-title {
      margin: 0 0 var(--space-2) 0;
      color: var(--color-text-primary);
      font-size: var(--font-size-xl);
    }

    .no-results-text {
      margin: 0;
      font-size: var(--font-size-base);
    }

    /* Event Card Specific Styles */
    .event-card {
      container-type: inline-size;
      overflow: hidden;
      transition: box-shadow var(--transition-base);
    }

    .event-link {
      text-decoration: none;
      color: inherit;
      display: block;
    }

    .event-image {
      position: relative;
      height: clamp(250px, 30cqw, 400px);
      overflow: hidden;
      aspect-ratio: 4/5;
    }

    .event-image picture {
      display: block;
      width: 100%;
      height: 100%;
    }

    .event-card-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .event-content {
      padding: 0;
    }

    .event-title {
      margin: 0 0 var(--space-3) 0;
      color: var(--color-text-primary);
      font-size: clamp(var(--font-size-lg), 4cqw, var(--font-size-xl));
      line-height: var(--line-height-tight);
    }

    .event-meta {
      color: var(--color-text-secondary);
      font-size: clamp(var(--font-size-sm), 3cqw, var(--font-size-base));
      line-height: var(--line-height-normal);
    }

    .event-detail {
      margin-block-end: var(--space-2);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .event-label {
      font-weight: var(--font-weight-medium);
      flex-shrink: 0;
      min-width: 4rem;
    }

    .event-genre {
      margin-block-start: var(--space-3);
      padding-block-start: var(--space-3);
      border-block-start: 1px solid var(--color-border-light);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .genre-name {
      color: var(--color-text-disabled);
      font-size: var(--font-size-sm);
    }

    /* Container Query Enhancements */
    @container (min-width: 350px) {
      .event-title {
        font-size: var(--font-size-xl);
      }

      .event-meta {
        font-size: var(--font-size-base);
      }
    }
  </style>

  <script>
    // Update active button state after htmx swap
    document.body.addEventListener('htmx:afterSwap', (event) => {
      // Get the clicked button from the event
      const trigger = event.detail.target;
      if (!trigger) return;

      // Find all filter buttons
      const buttons = document.querySelectorAll('.date-button');

      // Remove active class from all buttons
      buttons.forEach(btn => btn.classList.remove('active'));

      // Find which button was clicked by checking the URL
      const url = new URL(window.location.href);
      const dateParam = url.searchParams.get('date');

      // Add active class to the correct button
      buttons.forEach(btn => {
        const btnUrl = new URL(btn.getAttribute('hx-get'), window.location.origin);
        const btnDate = btnUrl.searchParams.get('date');

        if ((!dateParam && !btnDate) || (dateParam && btnDate === dateParam)) {
          btn.classList.add('active');
        }
      });
    });
  </script>
</ContentPageLayout>