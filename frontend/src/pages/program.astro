---
import ContentPageLayout from '../layouts/ContentPageLayout.astro';
import CardGrid from '../components/CardGrid.astro';
import DateFilter from '../components/DateFilter.astro';
import { createDataService } from '../lib/sanity/dataService.js';
import { formatDateWithWeekday } from '../lib/utils/dates';
import { getOptimizedImageUrl, getResponsiveSrcSet, IMAGE_QUALITY, RESPONSIVE_WIDTHS } from '../lib/imageHelpers';
import { stegaClean } from '@sanity/client/stega';
import '../styles/program.css';

// Create data service with Visual Editing support
const dataService = createDataService(Astro.request);

// Hent program-siden innhold for metadata
const programPage = await dataService.getProgramPage();

// Get events from programPage.selectedEvents and filter out null/undefined
const events = (programPage?.selectedEvents || []).filter(event => event != null);

// Fallback values
const pageTitle = programPage?.title || 'Program';

// Extract unique dates for filter
const availableDates = events
  .filter(event => event.eventDate?.date)
  .map(event => ({
    date: event.eventDate!.date,
    title: event.eventDate!.title
  }));

// Group events by date
const eventsByDate = events.reduce((acc, event) => {
  if (!event?.eventDate?.date) return acc;

  const dateKey = event.eventDate.date;
  if (!acc[dateKey]) {
    acc[dateKey] = {
      date: event.eventDate.date,
      displayTitle: event.eventDate.title || formatDateWithWeekday(event.eventDate.date, 'no'),
      events: []
    };
  }
  acc[dateKey].events.push(event);
  return acc;
}, {} as Record<string, { date: string; displayTitle: string; events: typeof events }>);

// Sort dates chronologically and sort events within each date by time
const sortedDates = Object.values(eventsByDate)
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
  .map(dateGroup => ({
    ...dateGroup,
    events: dateGroup.events.sort((a, b) => {
      const timeA = a.eventTime?.startTime || '';
      const timeB = b.eventTime?.startTime || '';
      return timeA.localeCompare(timeB);
    })
  }));

// Get date filter from URL
const dateFilter = Astro.url.searchParams.get('date') || undefined;

// Filter dates if date parameter is present
const filteredDates = dateFilter
  ? sortedDates.filter(d => d.date === dateFilter)
  : sortedDates;
---

<ContentPageLayout
  title={pageTitle}
  excerpt={programPage?.excerpt}
  pageDocument={programPage}
>
  <div id="date-filter-container">
    <DateFilter
      availableDates={availableDates}
      language="no"
    />
  </div>

  <!-- Loading indicator for htmx requests -->
  <div id="filter-loading" class="htmx-indicator" aria-live="polite" aria-busy="false">
    Laster arrangementer...
  </div>

  <div id="event-results">
      {filteredDates.length > 0 ? (
        filteredDates.map(({ date, displayTitle, events: dateEvents }) => (
        <section class="content-section date-section" data-date={date}>
          <h3 class="date-title">{stegaClean(displayTitle)}</h3>
          <div class="grid events-grid">
            {dateEvents.map((event) => (
              <article class="event-card card" data-event-date={event.eventDate?.date}>
                <h4 class="event-title">{stegaClean(event.title)}</h4>

                {event.excerpt && (
                  <p class="event-excerpt">{stegaClean(event.excerpt)}</p>
                )}

                {event.image?.image && (
                  <div class="event-image">
                    <picture>
                      <source
                        srcset={getResponsiveSrcSet(event.image.image, RESPONSIVE_WIDTHS.MEDIUM, IMAGE_QUALITY.CARD)}
                        type="image/webp"
                        sizes="(max-width: 768px) 100vw, 400px"
                      />
                      <img
                        src={getOptimizedImageUrl(event.image.image, 400, 300, IMAGE_QUALITY.CARD)}
                        alt={event.image.alt || event.title}
                        loading="lazy"
                        decoding="async"
                        class="event-card-image"
                      />
                    </picture>
                  </div>
                )}

                <div class="event-meta">
                  {event.venue?.title && event.eventTime ? (
                    <div class="event-detail">
                      {stegaClean(event.venue.title)}, kl. {stegaClean(event.eventTime.startTime)}–{stegaClean(event.eventTime.endTime)}
                    </div>
                  ) : event.venue?.title ? (
                    <div class="event-detail">
                      {stegaClean(event.venue.title)}
                    </div>
                  ) : event.eventTime ? (
                    <div class="event-detail">
                      kl. {stegaClean(event.eventTime.startTime)}–{stegaClean(event.eventTime.endTime)}
                    </div>
                  ) : null}
                </div>

                <a href={`/program/${stegaClean(event.slug_no?.current || event.slug_en?.current)}`} class="event-read-more">
                  Les mer her →
                </a>

                <div class="event-actions">
                  {event.ticketType === 'free' ? (
                    <span class="ticket-info">Gratis</span>
                  ) : event.ticketUrl ? (
                    <a href={event.ticketUrl} class="btn btn-primary" target="_blank" rel="noopener noreferrer">Kjøp billetter</a>
                  ) : (
                    <span class="ticket-info">Salget starter snart</span>
                  )}
                </div>
              </article>
            ))}
          </div>
        </section>
      ))
    ) : (
      <section class="content-section">
        <div class="no-results">
          <h3 class="no-results-title">Ingen arrangementer funnet</h3>
          <p class="no-results-text">Ingen arrangementer er lagt til ennå</p>
        </div>
      </section>
      )}
  </div>
</ContentPageLayout>