---
import type { SanityDocument } from "@sanity/client";
import { sanityClient } from "sanity:client";
import Layout from '../layouts/Layout.astro';
import EventFilter from '../components/EventFilter.astro';
import Image from '../components/Image.astro';
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";

// Hent filter-opsjoner (eventDates, genres og venues)
const eventDates = await sanityClient.fetch(`*[_type == "eventDate" && isActive == true] | order(date asc)`);
const genres = await sanityClient.fetch(`*[_type == "genre"] | order(title asc)`);
const venues = await sanityClient.fetch(`*[_type == "venue"] | order(title asc)`);

// Hent URL-parametere for initial state
const url = new URL(Astro.request.url);
const initialFilters = {
  eventDate: url.searchParams.get('eventDate') || '',
  genre: url.searchParams.get('genre') || '',
  venue: url.searchParams.get('venue') || '',
};

// Hent arrangementer basert p√• filtre
let eventsQuery = `*[_type == "event" && isPublished == true`;
const queryParams: any = {};

if (initialFilters.eventDate) {
  eventsQuery += ` && eventDate->date == $eventDate`;
  queryParams.eventDate = initialFilters.eventDate;
}

if (initialFilters.genre) {
  eventsQuery += ` && genre->slug.current == $genre`;
  queryParams.genre = initialFilters.genre;
}

if (initialFilters.venue) {
  eventsQuery += ` && venue->slug.current == $venue`;
  queryParams.venue = initialFilters.venue;
}

eventsQuery += `] | order(eventDate->date asc) {
  _id, 
  title, 
  slug,
  eventTime{
    startTime,
    endTime
  },
  eventDate->{
    title,
    date
  },
  venue->{
    title
  },
  genre->{
    title
  },
  artists[]->{
    name
  },
  image
}`;

const events = await sanityClient.fetch<SanityDocument[]>(eventsQuery, queryParams);
---

<Layout title="Program - Sanity + Astro">
  <main class="container" transition:name="main-content">
    <header class="page-header">
      <h1 class="page-title" transition:name="page-title">
        üé≠ Program
      </h1>
      <p class="page-description">
        Utforsk v√•re kommende arrangementer og finn noe som passer deg
      </p>
    </header>
    
    <!-- Filter-komponent -->
    <EventFilter 
      initialFilters={initialFilters}
      filterOptions={{
        eventDates,
        genres,
        venues
      }}
    />
    
    <!-- Resultater -->
    <div id="results-container">
      <div id="event-results">
        {events.length > 0 ? (
          <div>
            <div class="results-count">
              üìä Viser {events.length} arrangement{events.length === 1 ? '' : 'er'}
            </div>
            <div class="events-grid">
              {events.map((event) => (
                <article 
                  class="event-card card" 
                  data-event-date={event.eventDate?.date}
                  transition:name={`event-card-${event.slug.current}`}
                >
                  <a href={`/program/${event.slug.current}`} class="event-link">
                    {event.image && (
                      <div 
                        class="event-image"
                        transition:name={`event-image-${event.slug.current}`}
                      >
                        <Image 
                          image={event.image.image}
                          alt={event.image.alt || event.title}
                          caption=""
                          credit=""
                          size="full"
                          aspectRatio="16:9"
                          alignment="center"
                          className="event-card-image"
                        />
                      </div>
                    )}
                    <div class="event-content">
                      <h3 
                        class="event-title"
                        transition:name={`event-title-${event.slug.current}`}
                      >
                        {event.title}
                      </h3>
                      
                      <div class="event-meta">
                        {event.eventDate && (
                          <div class="event-detail">
                            <span class="event-icon">üìÖ</span>
                            <span>{event.eventDate.title} ({new Date(event.eventDate.date).toLocaleDateString('nb-NO')})</span>
                          </div>
                        )}
                        
                        {event.eventTime && (
                          <div class="event-detail">
                            <span class="event-icon">üïê</span>
                            <span>{event.eventTime.startTime} - {event.eventTime.endTime}</span>
                          </div>
                        )}
                        
                        {event.venue && (
                          <div class="event-detail">
                            <span class="event-icon">üè¢</span>
                            <span>{event.venue.title}</span>
                          </div>
                        )}
                        
                        {event.artists && event.artists.length > 0 && (
                          <div class="event-detail">
                            <span class="event-icon">üéµ</span>
                            <span>{event.artists.map((artist: any) => artist.name).join(', ')}</span>
                          </div>
                        )}
                        
                        {event.genre && (
                          <div class="event-genre">
                            <span class="event-icon">üéº</span>
                            <span class="genre-name">{event.genre.title}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </a>
                </article>
              ))}
            </div>
          </div>
        ) : (
          <div class="no-results">
            <div class="no-results-icon">üîç</div>
            <h3 class="no-results-title">Ingen arrangementer funnet</h3>
            <p class="no-results-text">
              Pr√∏v √• endre filtrene eller <a href="/program" class="text-primary">vis alle arrangementer</a>
            </p>
          </div>
        )}
      </div>
    </div>
    
    <footer class="page-footer">
      <a href="/" class="back-link">
        ‚Üê Tilbake til forsiden
      </a>
    </footer>
  </main>

  <style>
    /* Page Layout */
    .page-header {
      margin-block-end: clamp(var(--space-5), 5vw, var(--space-8));
    }

    .page-title {
      margin: 0 0 var(--space-2) 0;
      color: var(--color-text-primary);
    }

    .page-description {
      margin: 0;
      color: var(--color-text-secondary);
      font-size: var(--font-size-lg);
    }

    .page-footer {
      margin-block-start: clamp(var(--space-6), 6vw, var(--space-9));
      padding-block-start: var(--space-6);
      border-block-start: 1px solid var(--color-border);
    }

    .back-link {
      color: var(--color-primary-500);
      text-decoration: none;
      font-weight: var(--font-weight-medium);
    }

    /* Results */
    .results-count {
      margin-block-end: var(--space-4);
      padding: var(--space-2) var(--space-4);
      background: #e8f5e8;
      border-radius: var(--radius-base);
      color: #2d5a2d;
    }

    /* Intrinsic Events Grid */
    .events-grid {
      container-type: inline-size;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(min(100%, max(320px, 28ch)), 1fr));
      gap: clamp(var(--space-4), 3vw, var(--space-6));
    }

    @container (min-width: 600px) {
      .events-grid {
        grid-template-columns: repeat(auto-fit, minmax(min(100%, 35ch), 1fr));
      }
    }

    @container (min-width: 900px) {
      .events-grid {
        grid-template-columns: repeat(auto-fit, minmax(min(100%, 40ch), 1fr));
      }
    }

    /* Event Card */
    .event-card {
      container-type: inline-size;
      overflow: hidden;
      transition: box-shadow var(--transition-base);
    }

    .event-link {
      text-decoration: none;
      color: inherit;
      display: block;
    }

    .event-image {
      position: relative;
      height: clamp(180px, 20cqw, 240px);
      overflow: hidden;
      aspect-ratio: 16/9;
    }

    .event-card-image .image-container {
      margin: 0;
      height: 100%;
    }
    
    .event-card-image .image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 0;
    }
    
    .event-card-image .image-caption {
      display: none;
    }

    .event-content {
      padding: 0; /* Let card handle padding with container queries */
    }

    .event-title {
      margin: 0 0 var(--space-3) 0;
      color: var(--color-text-primary);
      font-size: clamp(var(--font-size-lg), 4cqw, var(--font-size-xl));
      line-height: var(--line-height-tight);
    }

    .event-meta {
      color: var(--color-text-secondary);
      font-size: clamp(var(--font-size-sm), 3cqw, var(--font-size-base));
      line-height: var(--line-height-normal);
    }

    .event-detail {
      margin-block-end: var(--space-2);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .event-icon {
      font-size: 1rem;
      flex-shrink: 0;
    }

    .event-genre {
      margin-block-start: var(--space-3);
      padding-block-start: var(--space-3);
      border-block-start: 1px solid var(--color-border-light);
      display: flex;
      align-items: center;
      gap: var(--space-2);
    }

    .genre-name {
      color: var(--color-text-disabled);
      font-size: var(--font-size-sm);
    }

    /* No Results */
    .no-results {
      text-align: center;
      padding: clamp(var(--space-6), 8vw, var(--space-9));
      color: var(--color-text-secondary);
    }

    .no-results-icon {
      font-size: clamp(var(--font-size-4xl), 10vw, var(--font-size-5xl));
      margin-block-end: var(--space-4);
    }

    .no-results-title {
      margin: 0 0 var(--space-4) 0;
      color: var(--color-text-primary);
    }

    .no-results-text {
      margin: 0;
      font-size: var(--font-size-lg);
    }

    /* Container Query Enhancements */
    @container (min-width: 350px) {
      .event-title {
        font-size: var(--font-size-xl);
      }
      
      .event-meta {
        font-size: var(--font-size-base);
      }
    }

    @container (min-width: 400px) {
      .event-image {
        height: 200px;
      }
    }
  </style>

  <!-- 
    URL-OPPDATERING FOR FILTRERING
    ===============================
    
    Denne JavaScript-koden oppdaterer URL-en med query-parametere etter HTMX-filtrering,
    slik at URL-en blir bookmarkbar og delbar. Eksempel: /program?eventDate=2026-06-23&genre=jazz&venue=the-house
    
    Hvordan det fungerer:
    1. Lytter p√• 'htmx:afterRequest' event (n√•r filtrering er ferdig)
    2. Henter valgte filtre fra HTMX-parametere
    3. Bygger ny URL med query-parametere
    4. Oppdaterer browser-historikk uten √• laste siden p√• nytt
    
    Dette gj√∏r at:
    - URL-en viser valgte filtre (bookmarkbar/delbar)
    - Refresh fungerer (siden leser URL-parametere)
    - Filtrering fungerer fortsatt (HTMX sender til API)
    - Browser-historikk fungerer (tilbake/frem-knapper)
  -->
  <script>
    // Lytter p√• HTMX-filtrering og oppdaterer URL-en
    document.addEventListener('htmx:afterRequest', function(event) {
      // Sjekk at dette er filtrerings-foresp√∏rselen (ikke andre HTMX-kall)
      if (event.detail.xhr.responseURL.includes('/api/filter-events')) {
        
        // Hent valgte filtre fra HTMX-parametere
        const hxVals = event.detail.elt.getAttribute('hx-vals');
        let selectedEventDate = '';
        let selectedGenre = '';
        let selectedVenue = '';
        
        if (hxVals) {
          try {
            const vals = JSON.parse(hxVals);
            selectedEventDate = vals.eventDate || '';
            selectedGenre = vals.genre || '';
            selectedVenue = vals.venue || '';
          } catch (e) {
            console.log('Kunne ikke parse hx-vals:', hxVals);
          }
        }
        
        // Bygg ny URL med query-parametere
        const currentUrl = new URL(window.location);
        
        // Legg til eller fjern eventDate-parameter basert p√• valg
        if (selectedEventDate) {
          currentUrl.searchParams.set('eventDate', selectedEventDate);
        } else {
          currentUrl.searchParams.delete('eventDate');
        }
        
        // Legg til eller fjern genre-parameter basert p√• valg
        if (selectedGenre) {
          currentUrl.searchParams.set('genre', selectedGenre);
        } else {
          currentUrl.searchParams.delete('genre');
        }
        
        // Legg til eller fjern venue-parameter basert p√• valg
        if (selectedVenue) {
          currentUrl.searchParams.set('venue', selectedVenue);
        } else {
          currentUrl.searchParams.delete('venue');
        }
        
        // Oppdater browser-historikk uten √• laste siden p√• nytt
        // Dette gj√∏r URL-en bookmarkbar og delbar
        window.history.pushState({}, '', currentUrl.toString());
      }
    });
    
    // Enhanced navigation with View Transitions
    document.addEventListener('astro:page-load', () => {
      console.log('Page loaded with View Transitions');
      
      // Reinitialize HTMX if needed
      if (typeof htmx !== 'undefined') {
        htmx.process(document.body);
      }
    });
  </script>
</Layout> 