---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import EventFilter from '../components/EventFilter.astro';
import Image from '../components/Image.astro';
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { sanityClient } from "sanity:client";

// Use Content Layer for events, venues, and genres
const events = await getCollection('events');
const venues = await getCollection('venues');
const genres = await getCollection('genres');

// Still need to fetch eventDates directly as they're not in Content Layer yet
const eventDates = await sanityClient.fetch(`*[_type == "eventDate" && isActive == true] | order(date asc)`);

// Get URL parameters for initial state
const url = new URL(Astro.request.url);
const initialFilters = {
  eventDate: url.searchParams.get('eventDate') || '',
  genre: url.searchParams.get('genre') || '',
  venue: url.searchParams.get('venue') || '',
};

// Filter events using the Content Layer data
let filteredEvents = events;

if (initialFilters.eventDate) {
  filteredEvents = filteredEvents.filter(event => 
    event.data.eventDate?.date && 
    event.data.eventDate.date.toISOString().split('T')[0] === initialFilters.eventDate
  );
}

if (initialFilters.genre) {
  filteredEvents = filteredEvents.filter(event => 
    event.data.genre?.slug === initialFilters.genre
  );
}

if (initialFilters.venue) {
  filteredEvents = filteredEvents.filter(event => 
    event.data.venue?.slug === initialFilters.venue
  );
}

// Sort events by date
filteredEvents.sort((a, b) => {
  const dateA = a.data.eventDate?.date || new Date(0);
  const dateB = b.data.eventDate?.date || new Date(0);
  return dateA.getTime() - dateB.getTime();
});

// Image URL builder setup
const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
  projectId && dataset ? imageUrlBuilder({ projectId, dataset }).image(source) : null;

const getImageUrl = (image: any, width: number, height: number) => {
  if (!image || !urlFor) return '';
  const imageBuilder = urlFor(image);
  return imageBuilder ? imageBuilder.width(width).height(height).url() || '' : '';
};

// Format date helper
function formatDate(date: Date): string {
  const dayNames = ['Søndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag'];
  const monthNames = [
    'januar', 'februar', 'mars', 'april', 'mai', 'juni',
    'juli', 'august', 'september', 'oktober', 'november', 'desember',
  ];

  const dayName = dayNames[date.getDay()];
  const day = date.getDate();
  const month = monthNames[date.getMonth()];

  return `${dayName}, ${day}. ${month}`;
}
---

<Layout title="Program - Content Layer Demo">
  <main>
    <div style="max-width: 1200px; margin: 0 auto; padding: 2rem 1rem;">
      <div style="text-align: center; margin-bottom: 3rem;">
        <h1 style="font-size: 3rem; margin-bottom: 1rem; color: #333;">Program</h1>
        <p style="font-size: 1.2rem; color: #666; max-width: 600px; margin: 0 auto;">
          Oppdag våre kommende arrangementer og konserter. Filtrer etter dato, sjanger eller spillested.
        </p>
        <div style="margin-top: 1rem; padding: 0.75rem 1.5rem; background: #e8f5e8; border-radius: 8px; display: inline-block;">
          <strong>⚡ Powered by Astro 5 Content Layer</strong> - Cached og optimalisert innholdslasting
        </div>
      </div>

      <!-- Event Filter Component -->
      <EventFilter 
        eventDates={eventDates}
        genres={genres.map(g => ({ title: g.data.title, slug: { current: g.data.slug } }))}
        venues={venues.map(v => ({ title: v.data.title, slug: { current: v.data.slug } }))}
        initialFilters={initialFilters}
      />

      <!-- Events Display -->
      <div id="event-results">
        {filteredEvents.length > 0 ? (
          <div>
            <div style="margin-bottom: 1rem; padding: 0.5rem; background: #e8f5e8; border-radius: 4px; color: #2d5a2d;">
              📊 Viser {filteredEvents.length} arrangement{filteredEvents.length === 1 ? '' : 'er'}
              {initialFilters.eventDate || initialFilters.genre || initialFilters.venue ? ' (filtrert)' : ''}
            </div>
            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1.5rem;">
              {filteredEvents.map((event) => (
                <div style="border: 1px solid #e9ecef; border-radius: 12px; background: white; overflow: hidden; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                  <a href={`/program/${event.data.slug}`} style="text-decoration: none; color: inherit; display: block;">
                    {event.data.image?.image && (
                      <div style="position: relative; height: 200px; overflow: hidden;">
                        <img 
                          src={getImageUrl(event.data.image.image, 400, 300)}
                          alt={event.data.image.alt || event.data.title}
                          style="width: 100%; height: 100%; object-fit: cover; border-radius: 0;"
                          loading="lazy"
                        />
                      </div>
                    )}
                    <div style="padding: 1.25rem;">
                      <h3 style="margin: 0 0 0.75rem 0; color: #333; font-size: 1.2rem; line-height: 1.3;">
                        {event.data.title}
                      </h3>
                      <div style="color: #666; font-size: 0.9rem; line-height: 1.4;">
                        {event.data.eventDate && (
                          <div style="margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1rem;">📅</span>
                            <span>{event.data.eventDate.title} ({formatDate(event.data.eventDate.date)})</span>
                          </div>
                        )}
                        {event.data.eventTime && (
                          <div style="margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1rem;">🕐</span>
                            <span>{event.data.eventTime.startTime} - {event.data.eventTime.endTime}</span>
                          </div>
                        )}
                        {event.data.venue && (
                          <div style="margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1rem;">🏢</span>
                            <span>{event.data.venue.title}</span>
                          </div>
                        )}
                        {event.data.artists && event.data.artists.length > 0 && (
                          <div style="margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1rem;">🎵</span>
                            <span>{event.data.artists.map(artist => artist.name).join(', ')}</span>
                          </div>
                        )}
                        {event.data.genre && (
                          <div style="margin-top: 0.75rem; padding-top: 0.75rem; border-top: 1px solid #f0f0f0; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1rem;">🎼</span>
                            <span style="color: #999; font-size: 0.85rem;">{event.data.genre.title}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div style="text-align: center; padding: 3rem; color: #666;">
            <div style="font-size: 4rem; margin-bottom: 1rem;">🔍</div>
            <h3 style="margin: 0 0 1rem 0; color: #333;">Ingen arrangementer funnet</h3>
            <p style="margin: 0; font-size: 1.1rem;">
              {initialFilters.eventDate || initialFilters.genre || initialFilters.venue 
                ? 'Prøv å endre filtrene eller '
                : ''
              }<a href="/program" style="color: #007acc;">vis alle arrangementer</a>
            </p>
          </div>
        )}
      </div>

      <!-- Performance Information -->
      <div style="margin-top: 3rem; padding: 1.5rem; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #007acc;">
        <h4 style="margin: 0 0 1rem 0; color: #333;">Content Layer Performance</h4>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; font-size: 0.9rem; color: #666;">
          <div>
            <strong>Events:</strong> {events.length} cached entries
          </div>
          <div>
            <strong>Venues:</strong> {venues.length} cached entries
          </div>
          <div>
            <strong>Genres:</strong> {genres.length} cached entries
          </div>
          <div>
            <strong>Build-time:</strong> Data cached at build
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Add some interactivity for demo purposes
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 Content Layer Demo loaded');
    console.log('📊 Performance benefits: Cached data, faster builds, type safety');
  });
</script>